version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: devportal_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-devportal}
      POSTGRES_USER: ${POSTGRES_USER:-devportal_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5433:5432"
    networks:
      - devportal-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-devportal_user} -d ${POSTGRES_DB:-devportal}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: devportal_redis
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6380:6379"
    networks:
      - devportal-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Frontend Development Server
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      target: development
    container_name: devportal_frontend
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
      - INTERNAL_API_URL=http://backend:8000
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    networks:
      - devportal-network
    depends_on:
      - backend
    profiles:
      - frontend

  # FastAPI Backend Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: devportal_backend
    restart: unless-stopped
    env_file:
      - .env.dev
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-devportal_user}:${POSTGRES_PASSWORD:-dev_password_123}@postgres:5432/${POSTGRES_DB:-devportal}
      - REDIS_URL=redis://redis:6379/0
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - FRONTEND_URL=http://localhost:3000
    volumes:
      - ./backend/app:/app/app:rw
      - ./backend/scripts:/app/scripts:rw
      - ./shared:/app/shared:ro
      - app_logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - devportal-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Full Stack (Production-like build)
  fullstack:
    build:
      context: .
      dockerfile: Dockerfile.fullstack
      target: production
    container_name: devportal_fullstack
    restart: unless-stopped
    env_file:
      - .env.prod
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-devportal_user}:${POSTGRES_PASSWORD:-dev_password_123}@postgres:5432/${POSTGRES_DB:-devportal}
      - REDIS_URL=redis://redis:6379/0
      - NODE_ENV=production
    volumes:
      - app_logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - devportal-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      - production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Adminer - Database Management UI (Development only)
  adminer:
    image: adminer:4.8.1
    container_name: devportal_adminer
    restart: unless-stopped
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    ports:
      - "8081:8080"
    networks:
      - devportal-network
    depends_on:
      - postgres
    profiles:
      - dev-tools

  # Redis Commander - Redis Management UI (Development only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: devportal_redis_commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: "local:redis:6379"
      HTTP_USER: admin
      HTTP_PASSWORD: admin
    ports:
      - "8082:8081"
    networks:
      - devportal-network
    depends_on:
      - redis
    profiles:
      - dev-tools

# Networks
networks:
  devportal-network:
    driver: bridge
    name: devportal-network

# Volumes
volumes:
  postgres_data:
    name: devportal_postgres_data
  redis_data:
    name: devportal_redis_data
  app_logs:
    name: devportal_app_logs
